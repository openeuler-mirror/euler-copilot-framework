{{- if .Values.databases.mongo.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "mongo.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  type: {{ default "ClusterIP" .Values.databases.mongo.service.type }}
  selector:
    app: {{ include "mongo.name" . }}
  ports:
    - port: 27017
      targetPort: 27017
      {{- if eq (default "ClusterIP" .Values.databases.mongo.service.type) "NodePort" }}
      nodePort: {{ .Values.databases.mongo.service.nodePort | required "当service.type为NodePort时必须指定nodePort" }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongo.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "mongo.name" . }}
spec:
  replicas: {{ .Values.globals.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: {{ include "mongo.name" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include "mongo.configmap" . | sha256sum }}
      labels:
        app: {{ include "mongo.name" . }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: mongo
          image: {{ .Values.databases.mongo.image | default (printf "hub.oepkgs.net/neocopilot/mongo:%s" (include "mongo.imageTag" .)) }}
          imagePullPolicy: {{ .Values.globals.imagePullPolicy | default "IfNotPresent" }}
          command:
            - bash
            - -c
            - |
              if [ ! -f "/data/db/file.key" ]; then
                  openssl rand -base64 756 > /data/db/file.key
              fi
              chmod 400 /data/db/file.key
              chown 999:999 /data/db/file.key
              exec docker-entrypoint.sh $$@
          args:
            - "mongod"
            - "--replSet"
            - "rs0"
            - "--bind_ip_all"
            - "--keyFile"
            - "/data/db/file.key"
          ports:
            - containerPort: 27017
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - /tmp/healthcheck.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "euler_copilot"
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: euler-copilot-database
                  key: mongo-password
            - name: MONGO_INITDB_DATABASE
              value: euler_copilot
          volumeMounts:
            - mountPath: /data/db
              name: mongo-data
            - mountPath: /tmp/healthcheck.sh
              name: mongo-init
              subPath: healthcheck.sh
          resources:
            {{- toYaml .Values.databases.mongo.resources | nindent 12 }}
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-storage
        - name: mongo-init
          configMap:
            name: mongo-config
{{- end }}

{{- define "mongo.imageTag" -}}
  {{- $arch := .Values.globals.arch | default "amd64" | replace "aarch64" "arm64" -}}
  {{- if eq $arch "arm64" -}}7.0.16-arm
  {{- else if eq $arch "amd64" -}}7.0.16-x86
  {{- else -}}7.0.16
  {{- end -}}
{{- end -}}

{{- define "mongo.name" -}}
{{- default "mongo" .Values.databases.mongo.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{- define "mongo.fullname" -}}
{{- printf "%s-%s" .Release.Name "mongo" | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{- define "mongo.configmap" -}}
{{- printf "%s-config" (include "mongo.fullname" .) -}}
{{- end -}}
